{"version":3,"file":"http_interceptor_backend.js","sourceRoot":"","sources":["../../src/http_interceptor_backend.ts"],"names":[],"mappings":"OASO,EAAC,UAAU,EAAC,MAAM,MAAM;OACxB,EAAC,yBAAyB,EAAC,MAAM,+BAA+B;AACvE;IACA;;;OAGG;IACH,gCAAoB,gBAAmC,EAC/C,UAAsB;QADV,qBAAgB,GAAhB,gBAAgB,CAAmB;QAC/C,eAAU,GAAV,UAAU,CAAY;IAC5B,CAAC;IACH;;;OAGG;IACI,iDAAgB,GAAvB,UAAwB,OAAY;QAChC,IAAI,gBAAgB,CAAC,MAAM,GAAwB,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;QAC1E;YACE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC;gBACxB,kBAAS;YACX,CAAC;YACD,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,UAAC,GAAG;gBAC3B,IAAI,gBAAgB,CAAC,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACvD,MAAM,CAAC,OAAO,YAAY,UAAU,GAAG,OAAO,GAAG,UAAU,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;;QAPL,GAAG,CAAC,CAAqC,UAAqB,EAArB,KAAA,IAAI,CAAC,gBAAgB,EAArB,cAAqB,EAArB,IAAqB,CAAC;YAA1D,IAAqB,WAAW,SAAA;;SAQpC;QACD,IAAI,gBAAgB,CAAC,UAAU,GAAG,IAAI,yBAAyB,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACzF,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,UAAC,WAAW;YACxC,EAAE,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;gBACtB,UAAU,CAAC,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAC/D,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC;IACpB,CAAC;IACH,6BAAC;AAAD,CAAC,AA/BD,IA+BC;AAED;IACA,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,gBAAgB,CAAC;IAClD,gBAAgB;IAChB,sBAAsB,CAAC,SAAS,CAAC,UAAU,CAAC;AAC5C,CAAC","sourcesContent":["/**\r\n * Created by yulonh on 2016/11/22.\r\n */\r\nimport {\r\n  ConnectionBackend,\r\n  XHRBackend,\r\n  Request\r\n} from '@angular/http';\r\nimport {HttpInterceptor} from './http_interceptor';\r\nimport {Observable} from 'rxjs';\r\nimport {HttpInterceptorConnection} from './http_interceptor_connection';\nexport class HttpInterceptorBackend implements ConnectionBackend {\n/**\n * @param {?} httpInterceptors\n * @param {?} xhrBackend\n */\nconstructor(private httpInterceptors: HttpInterceptor[],\nprivate xhrBackend: XHRBackend) {\r\n  }\n/**\n * @param {?} request\n * @return {?}\n */\npublic createConnection(request: any): HttpInterceptorConnection {\r\n    let /** @type {?} */ reqObs: Observable<Request> = Observable.of(request);\r\n    for (let /** @type {?} */ interceptor of this.httpInterceptors) {\r\n      if (!interceptor.before) {\r\n        continue;\r\n      }\r\n      reqObs = reqObs.mergeMap((req) => {\r\n        let /** @type {?} */ nextReq = interceptor.before(req);\r\n        return nextReq instanceof Observable ? nextReq : Observable.of(nextReq);\r\n      });\r\n    }\r\n    let /** @type {?} */ connection = new HttpInterceptorConnection(reqObs, this.xhrBackend);\r\n    this.httpInterceptors.forEach((interceptor) => {\r\n      if (interceptor.after) {\r\n        connection.response = interceptor.after(connection.response);\r\n      }\r\n    });\r\n    return connection;\r\n  }\r\n}\n\nfunction HttpInterceptorBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpInterceptorBackend.prototype.httpInterceptors;\n/** @type {?} */\nHttpInterceptorBackend.prototype.xhrBackend;\n}\n\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}