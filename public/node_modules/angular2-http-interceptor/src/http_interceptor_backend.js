import { Observable } from 'rxjs';
import { HttpInterceptorConnection } from './http_interceptor_connection';
export var HttpInterceptorBackend = (function () {
    /**
     * @param {?} httpInterceptors
     * @param {?} xhrBackend
     */
    function HttpInterceptorBackend(httpInterceptors, xhrBackend) {
        this.httpInterceptors = httpInterceptors;
        this.xhrBackend = xhrBackend;
    }
    /**
     * @param {?} request
     * @return {?}
     */
    HttpInterceptorBackend.prototype.createConnection = function (request) {
        var /** @type {?} */ reqObs = Observable.of(request);
        var _loop_1 = function(interceptor) {
            if (!interceptor.before) {
                return "continue";
            }
            reqObs = reqObs.mergeMap(function (req) {
                var /** @type {?} */ nextReq = interceptor.before(req);
                return nextReq instanceof Observable ? nextReq : Observable.of(nextReq);
            });
        };
        for (var _i = 0, _a = this.httpInterceptors; _i < _a.length; _i++) {
            var interceptor = _a[_i];
            _loop_1(interceptor);
        }
        var /** @type {?} */ connection = new HttpInterceptorConnection(reqObs, this.xhrBackend);
        this.httpInterceptors.forEach(function (interceptor) {
            if (interceptor.after) {
                connection.response = interceptor.after(connection.response);
            }
        });
        return connection;
    };
    return HttpInterceptorBackend;
}());
function HttpInterceptorBackend_tsickle_Closure_declarations() {
    /** @type {?} */
    HttpInterceptorBackend.prototype.httpInterceptors;
    /** @type {?} */
    HttpInterceptorBackend.prototype.xhrBackend;
}
//# sourceMappingURL=http_interceptor_backend.js.map